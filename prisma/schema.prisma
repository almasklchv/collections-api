generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  BLOCKED
}

enum CollectionType {
  COINS
  POSTCARDS
  BANKNOTES
  PAINTING
  STAMPS
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  passwordHash String
  name         String
  role         Role
  status       Status
  collections  Collection[]
  comments     Comment[]
  likes        Like[]
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  token        Token[]
  Item         Item[]

  @@map("users")
}

model Collection {
  id                    String         @id @default(cuid())
  user                  User           @relation(fields: [userId], references: [id])
  userId                String         @map("user_id")
  title                 String
  description           String
  theme                 CollectionType
  imageUrl              String?        @map("image_url")
  custom_string1_state  Boolean        @default(false)
  custom_string1_name   String?
  custom_string2_state  Boolean        @default(false)
  custom_string2_name   String?
  custom_string3_state  Boolean        @default(false)
  custom_string3_name   String?
  custom_int1_state     Boolean        @default(false)
  custom_int1_name      String?
  custom_int2_state     Boolean        @default(false)
  custom_int2_name      String?
  custom_int3_state     Boolean        @default(false)
  custom_int3_name      String?
  custom_text1_state    Boolean        @default(false)
  custom_text1_name     String?
  custom_text2_state    Boolean        @default(false)
  custom_text2_name     String?
  custom_text3_state    Boolean        @default(false)
  custom_text3_name     String?
  custom_boolean1_state Boolean        @default(false)
  custom_boolean1_name  String?
  custom_boolean2_state Boolean        @default(false)
  custom_boolean2_name  String?
  custom_boolean3_state Boolean        @default(false)
  custom_boolean3_name  String?
  custom_date1_state    Boolean        @default(false)
  custom_date1_name     String?
  custom_date2_state    Boolean        @default(false)
  custom_date2_name     String?
  custom_date3_state    Boolean        @default(false)
  custom_date3_name     String?
  items                 Item[]
  createdAt             DateTime       @default(now()) @map("created_at")
  updatedAt             DateTime       @updatedAt @map("updated_at")

  @@map("collections")
}

model Item {
  id           String     @id @default(cuid())
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String     @map("collection_id")
  title        String
  tags         String[]
  comments     Comment[]
  likes        Like[]
  customFields Json?      @map("custom_fields")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  User         User?      @relation(fields: [userId], references: [id])
  userId       String?

  @@map("items")
}

model Comment {
  id        String   @id @default(cuid())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @map("item_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    String   @map("item_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("likes")
}

model Token {
  token     String    @unique
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String    @map("user_id")
  userAgent String    @map("user_agent")
  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("tokens")
}
